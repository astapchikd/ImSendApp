// This file is generated by omniidl (C++ backend) - omniORB_4_3. Do not edit.

#include "ImSender.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_3;



ImageSender::Sender_ptr ImageSender::Sender_Helper::_nil() {
  return ::ImageSender::Sender::_nil();
}

::CORBA::Boolean ImageSender::Sender_Helper::is_nil(::ImageSender::Sender_ptr p) {
  return ::CORBA::is_nil(p);

}

void ImageSender::Sender_Helper::release(::ImageSender::Sender_ptr p) {
  ::CORBA::release(p);
}

void ImageSender::Sender_Helper::marshalObjRef(::ImageSender::Sender_ptr obj, cdrStream& s) {
  ::ImageSender::Sender::_marshalObjRef(obj, s);
}

ImageSender::Sender_ptr ImageSender::Sender_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ImageSender::Sender::_unmarshalObjRef(s);
}

void ImageSender::Sender_Helper::duplicate(::ImageSender::Sender_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

ImageSender::Sender_ptr
ImageSender::Sender::_duplicate(::ImageSender::Sender_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

ImageSender::Sender_ptr
ImageSender::Sender::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ImageSender::Sender_ptr
ImageSender::Sender::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ImageSender::Sender_ptr
ImageSender::Sender::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Sender _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Sender* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_Sender;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ImageSender::Sender::_PD_repoId = "IDL:ImageSender/Sender:1.0";


ImageSender::_objref_Sender::~_objref_Sender() {
  
}


ImageSender::_objref_Sender::_objref_Sender(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ImageSender::Sender::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ImageSender::_objref_Sender::_ptrToObjRef(const char* id)
{
  if (id == ::ImageSender::Sender::_PD_repoId)
    return (::ImageSender::Sender_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::ImageSender::Sender::_PD_repoId))
    return (::ImageSender::Sender_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for ImageSender::Sender::Send

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_clong_i_cImageSender_mSender_mimage
class _0RL_cd_fe84fa31a645d93a_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_fe84fa31a645d93a_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long arg_1;
  ImageSender::Sender::image_var arg_2_;
  const ImageSender::Sender::image* arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_fe84fa31a645d93a_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  (const ImageSender::Sender::image&) *arg_2 >>= _n;

}

void _0RL_cd_fe84fa31a645d93a_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;
  arg_2_ = new ImageSender::Sender::image;
  (ImageSender::Sender::image&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

void _0RL_cd_fe84fa31a645d93a_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_fe84fa31a645d93a_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_fe84fa31a645d93a_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_fe84fa31a645d93a_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_fe84fa31a645d93a_00000000* tcd = (_0RL_cd_fe84fa31a645d93a_00000000*)cd;
  ImageSender::_impl_Sender* impl = (ImageSender::_impl_Sender*) svnt->_ptrToInterface(ImageSender::Sender::_PD_repoId);
  tcd->result = impl->Send(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

::CORBA::Boolean ImageSender::_objref_Sender::Send(const char* filename, ::CORBA::Long sizefname, const ::ImageSender::Sender::image& im)
{
  _0RL_cd_fe84fa31a645d93a_00000000 _call_desc(_0RL_lcfn_fe84fa31a645d93a_10000000, "Send", 5);
  _call_desc.arg_0 = filename;
  _call_desc.arg_1 = sizefname;
  _call_desc.arg_2 = &(::ImageSender::Sender::image&) im;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for ImageSender::Sender::shutdown

// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_fe84fa31a645d93a_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_fe84fa31a645d93a_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Boolean result;
};

void _0RL_cd_fe84fa31a645d93a_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_fe84fa31a645d93a_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_fe84fa31a645d93a_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_fe84fa31a645d93a_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_fe84fa31a645d93a_20000000* tcd = (_0RL_cd_fe84fa31a645d93a_20000000*)cd;
  ImageSender::_impl_Sender* impl = (ImageSender::_impl_Sender*) svnt->_ptrToInterface(ImageSender::Sender::_PD_repoId);
  tcd->result = impl->shutdown();


}

::CORBA::Boolean ImageSender::_objref_Sender::shutdown()
{
  _0RL_cd_fe84fa31a645d93a_20000000 _call_desc(_0RL_lcfn_fe84fa31a645d93a_30000000, "shutdown", 9);


  _invoke(_call_desc);
  return _call_desc.result;


}

ImageSender::_pof_Sender::~_pof_Sender() {}


omniObjRef*
ImageSender::_pof_Sender::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ImageSender::_objref_Sender(ior, id);
}


::CORBA::Boolean
ImageSender::_pof_Sender::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::ImageSender::Sender::_PD_repoId))
    return 1;
  
  return 0;
}

const ImageSender::_pof_Sender _the_pof_ImageSender_mSender;

ImageSender::_impl_Sender::~_impl_Sender() {}


::CORBA::Boolean
ImageSender::_impl_Sender::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "Send")) {

    _0RL_cd_fe84fa31a645d93a_00000000 _call_desc(_0RL_lcfn_fe84fa31a645d93a_10000000, "Send", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "shutdown")) {

    _0RL_cd_fe84fa31a645d93a_20000000 _call_desc(_0RL_lcfn_fe84fa31a645d93a_30000000, "shutdown", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ImageSender::_impl_Sender::_ptrToInterface(const char* id)
{
  if (id == ::ImageSender::Sender::_PD_repoId)
    return (::ImageSender::_impl_Sender*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::ImageSender::Sender::_PD_repoId))
    return (::ImageSender::_impl_Sender*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
ImageSender::_impl_Sender::_mostDerivedRepoId()
{
  return ::ImageSender::Sender::_PD_repoId;
}

POA_ImageSender::Sender::~Sender() {}

